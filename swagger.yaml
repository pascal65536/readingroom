openapi: 3.0.0
info:
  title: GovDataHub API
  description: API для управления книгами, авторами и категориями
  version: 1.0.0
servers:
  - url: http://govdatahub.ru
    description: Production server
  - url: http://localhost:5000
    description: Local development server

tags:
  - name: Auth
    description: Аутентификация
  - name: Books
    description: Управление книгами
  - name: Authors
    description: Управление авторами
  - name: Categories
    description: Управление категориями
  - name: Files
    description: Работа с файлами

paths:
  /login:
    post:
      tags: [Auth]
      summary: Получить токен доступа
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  example: password1
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  /books:
    get:
      tags: [Books]
      summary: Получить список всех книг
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список книг
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      tags: [Books]
      summary: Загрузить новую книгу
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                json_data:
                  type: string
                  example: '{"title": "Название книги"}'
      responses:
        '200':
          description: Книга успешно загружена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookUploadResponse'

  /books/{book_id}:
    get:
      tags: [Books]
      summary: Получить информацию о книге
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
          example: 3091401a1c74bfd441ace8d420f1e524
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Информация о книге
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

    put:
      tags: [Books]
      summary: Обновить информацию о книге
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdateRequest'
      responses:
        '200':
          description: Книга обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

    delete:
      tags: [Books]
      summary: Удалить книгу
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Книга удалена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Book deleted

  /books/{book_id}/authors:
    post:
      tags: [Books]
      summary: Добавить автора к книге
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Автор добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Author added to the book
        '400':
          description: Автор уже добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Author already added to the book

    delete:
      tags: [Books]
      summary: Удалить автора из книги
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Автор удалён
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Author removed to the book
        '400':
          description: Автор не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Author not found in the book

  /books/{book_id}/categories:
    post:
      tags: [Books]
      summary: Добавить категорию к книге
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Категория добавлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category added to the book
        '400':
          description: Категория уже добавлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category already added to the book

    delete:
      tags: [Books]
      summary: Удалить категорию из книги
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Категория удалена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category removed from the book
        '400':
          description: Категория не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found in the book

  /download/{book_id}:
    get:
      tags: [Books]
      summary: Скачать книгу
      parameters:
        - in: path
          name: book_id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Файл книги
          content:
            application/pdf:
              schema:
                type: string
                format: binary

  /authors:
    get:
      tags: [Authors]
      summary: Получить список авторов
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список авторов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

    post:
      tags: [Authors]
      summary: Создать автора
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorCreateRequest'
      responses:
        '200':
          description: Автор создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

  /authors/{author_id}:
    get:
      tags: [Authors]
      summary: Получить информацию об авторе
      parameters:
        - in: path
          name: author_id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Информация об авторе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Автор не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Author not found

    put:
      tags: [Authors]
      summary: Обновить информацию об авторе
      parameters:
        - in: path
          name: author_id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorUpdateRequest'
      responses:
        '200':
          description: Автор обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

    delete:
      tags: [Authors]
      summary: Удалить автора
      parameters:
        - in: path
          name: author_id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Автор удалён
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Author deleted
        '404':
          description: Автор не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Author not found

  /categories:
    get:
      tags: [Categories]
      summary: Получить список категорий
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список категорий
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      tags: [Categories]
      summary: Создать категорию
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        '200':
          description: Категория создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /categories/{category_id}:
    get:
      tags: [Categories]
      summary: Получить информацию о категории
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Информация о категории
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Категория не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found

    put:
      tags: [Categories]
      summary: Обновить информацию о категории
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
      responses:
        '200':
          description: Категория обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

    delete:
      tags: [Categories]
      summary: Удалить категорию
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Категория удалена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category deleted
        '404':
          description: Категория не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found

  /files:
    post:
      tags: [Files]
      summary: Загрузить файл
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                json_data:
                  type: string
                  example: '{"title": "Название файла"}'
      responses:
        '200':
          description: Файл загружен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'

  /file/{file_id}:
    get:
      tags: [Files]
      summary: Скачать файл
      parameters:
        - in: path
          name: file_id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Содержимое файла
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
          example: "3091401a1c74bfd441ace8d420f1e524"
        title:
          type: string
          example: "Список тем"
        isbn:
          type: string
          nullable: true
          example: "ISBN 987-6-5432-2345-6"
        publication_date:
          type: string
          example: "2023"
        publisher:
          type: string
          example: "РОССИЙСКАЯ АКАДЕМИЯ ОБРАЗОВАНИЯ"
        description:
          type: string
          example: "Предисловие и. о. вице-президента РАО..."
        file_path:
          type: string
          example: "uploads/30/91/3091401a1c74bfd441ace8d420f1e524.pdf"
        filename_orig:
          type: string
          example: "Перечень актуальных тематик.pdf"
        filename_uid:
          type: string
          example: "3091401a1c74bfd441ace8d420f1e524.pdf"
        cover_image:
          type: string
          nullable: true
          example: "uploads/92/6d/926d51b67bd5143a49f70513bef45952.png"
        telegram_file_id:
          type: string
          nullable: true
        telegram_link:
          type: string
          nullable: true
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    BookUploadResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        file_path:
          type: string
        filename_orig:
          type: string
        filename_uid:
          type: string

    BookUpdateRequest:
      type: object
      properties:
        title:
          type: string
          nullable: true
        isbn:
          type: string
          nullable: true
        publication_date:
          type: string
          nullable: true
        publisher:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        cover_image:
          type: string
          nullable: true

    Author:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Ю.В. Китаев"
        name_eng:
          type: string
          nullable: true
          example: "Kitayev Yu. V."

    AuthorCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        name_eng:
          type: string
          nullable: true

    AuthorUpdateRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        name_eng:
          type: string
          nullable: true

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Современная классика"

    CategoryCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    CategoryUpdateRequest:
      type: object
      properties:
        name:
          type: string

    FileUploadResponse:
      type: object
      properties:
        id:
          type: string
        file_path:
          type: string
        filename_orig:
          type: string
        filename_uid:
          type: string
          